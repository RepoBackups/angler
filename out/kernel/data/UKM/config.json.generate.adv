cat << CTAG
{
	name:ADV,
		elements:[
			`if [ -f "/sys/module/lowmemorykiller/parameters/minfree" ]; then
				$BB echo '{ SPane:{
					title:"Manual Low Memory Killer",
					description:"LMK Minfree controls how much memory each app type can hold, and is responsible for memory management for multitasking."
				}},
					{ SSpacer:{
							height: 1
					}},
					{ SOptionList:{
						title:"LMK Profile",
						description:"This option will auto-tune LMK minfree values as per selected profile.",
						default:Custom,
						action:"lmk profile",
						values:[ Custom, Low, Medium, Default, Aggressive, Exterminate,
						],
						notify:[
								{
									on:APPLY,
									do:[ REFRESH, APPLY ],
									to:[ 
											"lmk 1",
											"lmk 2",
											"lmk 3",
											"lmk 4",
											"lmk 5",
											"lmk 6"
									],
								}
						]
					}},'
					for LMK in 1 2 3 4 5 6; do
						$BB echo '{ SSeekBar:{ '
							case $LMK in
								1)
									$BB echo 'title:"Foreground App", description:"The application currenty on the screen and running."' ;;
								2)
									$BB echo 'title:"Visible App", description:"The application that is open and running in background."' ;;
								3)
									$BB echo 'title:"Secondary Server", description:"This is a service an application needs that is alive and ready."' ;;
								4)
									$BB echo 'title:"Hidden App", description:"An idle process that wakes up on application request."' ;;
								5)
									$BB echo 'title:"Content Provider", description:"Apps that provide data (content) to the system."' ;;
								6)
									$BB echo 'title:"Empty App", description:"Apps closed by the user but ready to run."' ;;
							esac
						$BB echo ', action:"lmk '${LMK}'",
						unit:"MB", min:1, max:300 }},'
					done
			fi`
			`if [ -f "/sys/module/lowmemorykiller/parameters/enable_adaptive_lmk" ] && [ -f "/sys/module/lowmemorykiller/parameters/vmpressure_file_min" ]; then
				AUTO=\`$BB cat /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk\`
				VMP=\`$BB cat /sys/module/lowmemorykiller/parameters/vmpressure_file_min\`
					$BB echo '{ SCheckBox:{
						label:"Adaptive LMK",
						description:"The basic idea here is to make LMK more aggressive dynamically when such a thrashing scenario is detected. To detect thrashing, this patch uses vmpressure events. The values of vmpressure upon which an action has to be taken, was derived empirically.",
						default:'$AUTO',
						action:"generic /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk"
					}},
					{ SSeekBar:{
						title:"VMPressure file min",
						description:"This parameter controls the behaviour of LMK when vmpressure is in the range of 90-94. Adaptive lmk triggers based on number file pages wrt vmpressure_file_min, when vmpressure is in the range of 90-94. Usually this is a pseudo minfree value, higher than the highest configured value in minfree array.",
						unit:" pages",
						step:1,
						min:0,
						max:100,
						default:'$VMP',
						action:"generic /sys/module/lowmemorykiller/parameters/vmpressure_file_min"
					}},'
			fi`
			{ SSpacer:{
					height: 1
			}},
			`if [ -f "/sys/module/wakeup/parameters/enable_si_ws" ]; then
				WSI=\`bool /sys/module/wakeup/parameters/enable_si_ws\`;
				$BB echo '{ SPane:{
						title:"Wakelock Control",
						description:"Wakelocks are power-managing software mechanisms, which make sure that your Android device does not go into deep sleep. It is an advanced feature so you have to pay close attention how use it."
					}},
					{ SSpacer:{
						height: 1
					}},
					{ SCheckBox:{
						label:"Wakelock Enabled",
						description:"If disabled skip - sensor_ind - (Proximity Sensor)",
						default:'$WSI',
						action:"boolean /sys/module/wakeup/parameters/enable_si_ws"
					}},'
			fi`
			`if [ -f "/sys/module/wakeup/parameters/enable_msm_hsic_ws" ]; then
				WHSIC=\`bool /sys/module/wakeup/parameters/enable_msm_hsic_ws\`;
				$BB echo '{ SSpacer:{
						height: 1
					}},
					{ SCheckBox:{
						label:"Wakelock Enabled",
						description:"If disabled skip - msm_hsic_ws - (Modem)",
						default:'$WHSIC',
						action:"boolean /sys/module/wakeup/parameters/enable_msm_hsic_ws"
					}},'
			fi`
			`if [ -f "/sys/module/wakeup/parameters/enable_wlan_wake_ws" ]; then
				WWWKE=\`bool /sys/module/wakeup/parameters/enable_wlan_wake_ws\`;
				$BB echo '{ SCheckBox:{
						label:"Wakelock Enabled",
						description:"If disabled skip - wlan_wake - (Wifi)",
						default:'$WWWKE',
						action:"boolean /sys/module/wakeup/parameters/enable_wlan_wake_ws"
					}},'
			fi`
			`if [ -f "/sys/module/wakeup/parameters/enable_wlan_rx_wake_ws" ]; then
				WWRX=\`bool /sys/module/wakeup/parameters/enable_wlan_rx_wake_ws\`;
				$BB echo '{ SSpacer:{
						height: 1
					}},
					{ SCheckBox:{
						label:"Wakelock Enabled",
						description:"If disabled skip - wlan_rx - (Wifi)",
						default:'$WWRX',
						action:"boolean /sys/module/wakeup/parameters/enable_wlan_rx_wake_ws"
					}},'
			fi`
			`if [ -f "/sys/module/bcmdhd/parameters/wlrx_divide" ]; then
				WWLRX=\`$BB cat /sys/module/bcmdhd/parameters/wlrx_divide\`;
				$BB echo '{ SSeekBar:{
						title:"Only If Enabled",
						description:"  We can control and reduced wakelock by dividing the timeout.",
						min:1,
						max:8,
						step:1,
						default:'$WWLRX',
						action:"generic /sys/module/bcmdhd/parameters/wlrx_divide"
					}},'
			fi`
			`if [ -f "/sys/module/wakeup/parameters/enable_wlan_ctrl_wake_ws" ]; then
				WWCTRL=\`bool /sys/module/wakeup/parameters/enable_wlan_ctrl_wake_ws\`;
				$BB echo '{ SCheckBox:{
						label:"Wakelock Enabled",
						description:"If disabled skip - wlan_ctrl - (Wifi)",
						default:'$WWCTRL',
						action:"boolean /sys/module/wakeup/parameters/enable_wlan_ctrl_wake_ws"
					}},'
			fi`
			`if [ -f "/sys/module/bcmdhd/parameters/wlctrl_divide" ]; then
				WWLCTRL=\`$BB cat /sys/module/bcmdhd/parameters/wlctrl_divide\`;
				$BB echo '{ SSeekBar:{
						title:"Only if Enabled",
						description:"  We can control and reduced wakelock by dividing the timeout.",
						min:1,
						max:8,
						step:1,
						default:'$WWLCTRL',
						action:"generic /sys/module/bcmdhd/parameters/wlctrl_divide"
					}},'
			fi`
		]
}
CTAG
